<?xml version="1.0" encoding="UTF-8" ?>  
<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">  
<log4j:configuration xmlns:log4j='http://jakarta.apache.org/log4j/'>  
  
    <!-- ========================== 自定义输出格式说明================================ -->  
      <!-- %p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL -->  
      <!-- %r 输出自应用启动到输出该log信息耗费的毫秒数  -->  
      <!-- %c 输出所属的类目，通常就是所在类的全名 -->  
      <!-- %t 输出产生该日志事件的线程名 -->  
      <!-- %n 输出一个回车换行符，Windows平台为“/r/n”，Unix平台为“/n” -->  
      <!-- %d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921  -->  
      <!-- %l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)  -->  
      <!-- ========================================================================== -->  
  
      <!-- ========================== 输出方式说明================================ -->  
      <!-- Log4j提供的appender有以下几种:  -->  
      <!-- org.apache.log4j.ConsoleAppender(控制台),  -->  
      <!-- org.apache.log4j.FileAppender(文件),  -->  
      <!-- org.apache.log4j.DailyRollingFileAppender(每天产生一个日志文件), -->  
      <!-- org.apache.log4j.RollingFileAppender(文件大小到达指定尺寸的时候产生一个新的文件),  -->  
      <!-- org.apache.log4j.WriterAppender(将日志信息以流格式发送到任意指定的地方)   -->  
  <!-- ========================================================================== -->  
  
    <!-- 将日志信息输出到文件，但是当文件的大小达到某个阈值的时候，日志文件会自动回滚 -->
    <appender name="log4jDebug" class="org.apache.log4j.RollingFileAppender">  
    	<!-- 设置File参数：日志输出文件名 --> 
        <param name="File" value="log/maven-example-debug.log"/> 
        <!-- 设置是否在重新启动服务时，在原有日志的基础添加新日志 -->   
        <param name="Append" value="true"/>
         <!-- 设置当日志文件达到此阈值的时候自动回滚，单位可以是KB，MB，GB，默认单位是KB -->   
        <param name="MaxFileSize" value="10KB"/>
         <!-- 设置保存备份回滚日志的最大个数 -->  
        <param name="MaxBackupIndex" value="2"/>
        <!-- 设置输出文件项目和格式 -->    
        <layout class="org.apache.log4j.PatternLayout">  
            <param name="ConversionPattern" value="%c %d{ISO8601}-- %p -- %m%n"/>  
        </layout>
        <!-- 设置输出级别 -->   
        <filter class="org.apache.log4j.varia.LevelRangeFilter">  
            <param name="LevelMin" value="DEBUG"/>  
            <param name="LevelMax" value="DEBUG"/>  
        </filter>  
    </appender>  
  
    <appender name="log4jInfo" class="org.apache.log4j.RollingFileAppender">  
        <param name="File" value="log/maven-example-info.log"/>  
        <param name="Append" value="true"/>  
        <param name="MaxFileSize" value="10KB"/>  
        <param name="MaxBackupIndex" value="2"/>  
        <layout class="org.apache.log4j.PatternLayout">  
            <param name="ConversionPattern" value="%c %d{ISO8601}-- %p -- %m%n"/>  
        </layout>  
        <filter class="org.apache.log4j.varia.LevelRangeFilter">  
            <param name="LevelMin" value="INFO"/>  
            <param name="LevelMax" value="INFO"/>  
        </filter>  
    </appender>  
  
  	<!-- 输出到控制台  -->  
	<appender name="CONSOLE" class="org.apache.log4j.ConsoleAppender">  
		  <layout class="org.apache.log4j.PatternLayout">  
		   <param name="ConversionPattern"  
		    value="%d - %c -%-4r [%t] %-5p %x - %m%n" />  
		  </layout>  
		   <!--限制输出级别-->  
		  <filter class="org.apache.log4j.varia.LevelRangeFilter">  
		   <param name="LevelMax" value="ERROR"/>  
		   <param name="LevelMin" value="TRACE"/>  
		  </filter>  
	</appender>
  
  <!--
     注意：
     1：当additivity="false"时，root中的配置就失灵了，不遵循缺省的继承机制
     2：logger中的name非常重要，它代表记录器的包的形式，有一定的包含关系，试验表明
        2-1：当定义的logger的name同名时，只有最后的那一个才能正确的打印日志
        2-2：当对应的logger含有包含关系时，比如：name=test.log4j.test8 和 name=test.log4j.test8.UseLog4j，则2-1的情况是一样的
        2-3：logger的name表示所有的包含在此名的所有记录器都遵循同样的配置，name的值中的包含关系是指记录器的名称哟！注意啦！
     3：logger中定义的level和appender中的filter定义的level的区间取交集
     4：如果appender中的filter定义的 levelMin > levelMax ，则打印不出日志信息
  -->
    <!--指定logger的设置，additivity指示是否遵循缺省的继承机制 -->
    <logger name="com.web" additivity="false">
        <level value ="debug"/>
        <appender-ref ref="log4jDebug"/>
        <appender-ref ref="log4jInfo"/>
        <appender-ref ref="CONSOLE"/>
    </logger>
	<!-- 根logger的设置-->
    <root>  
        <level value ="info"/> 
        <appender-ref ref="log4jDebug"/> 
        <appender-ref ref="log4jInfo"/> 
        <appender-ref ref="CONSOLE"/> 
    </root>
</log4j:configuration> 
